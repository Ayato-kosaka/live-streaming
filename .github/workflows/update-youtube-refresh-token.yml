name: Update YouTube OAuth Refresh Token

on:
  # 手動トリガー用。auth_code を取得した後、手動で実行する
  # @see https://github.com/Ayato-kosaka/live-streaming/issues/13#issuecomment-2795265041
  workflow_dispatch:
    inputs:
      auth_code:
        description: 'Google OAuth 認証後に得られた "code" パラメータ'
        required: true

jobs:
  exchange-code-and-update-secret:
    name: Exchange Auth Code & Update Secret
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Google OAuth トークンエンドポイントへ POST して、refresh_token を取得
      - name: Exchange auth_code for refresh_token
        id: fetch_token
        run: |
          echo "🔐 取得中: Google OAuth トークン..."

          # Google OAuth トークン取得エンドポイントにリクエスト
          RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -d client_id="${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -d client_secret="${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -d code="${{ github.event.inputs.auth_code }}" \
            -d grant_type=authorization_code \
            -d redirect_uri="https://oauth2.example.com/callback")

          echo "レスポンスを受信 ✅"

          # refresh_token を抽出（jq で JSON パース）
          REFRESH_TOKEN=$(echo "$RESPONSE" | jq -r '.refresh_token')

          # エラーハンドリング：refresh_token が取れなかった場合
          if [[ -z "$REFRESH_TOKEN" || "$REFRESH_TOKEN" == "null" ]]; then
            echo "❌ refresh_token の取得に失敗しました。auth_code または認証情報を再確認してください。"
            echo "レスポンス内容: $RESPONSE"
            exit 1
          fi

          # 機密情報のマスク出力（GitHub Actionsログ上に出さない）
          echo "::add-mask::$REFRESH_TOKEN"

          # 次のステップで使えるように出力
          echo "refresh_token=$REFRESH_TOKEN" >> $GITHUB_OUTPUT

      # 2️⃣ GitHub API を使って、GitHub の公開鍵（key_id）を取得
      - name: Get GitHub Public Key
        id: get_key
        run: |
          echo "公開鍵の取得中..."
          KEY_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)

          # 公開鍵と key_id を取得
          GITHUB_KEY_ID=$(echo "$KEY_RESPONSE" | jq -r '.key_id')
          GITHUB_KEY=$(echo "$KEY_RESPONSE" | jq -r '.key')

          echo "公開鍵取得 ✅"
          echo "GITHUB_KEY_ID=$GITHUB_KEY_ID" >> $GITHUB_ENV
          echo "GITHUB_KEY=$GITHUB_KEY" >> $GITHUB_ENV

      # 3️⃣ refresh_token を暗号化して GitHub Secrets に更新
      - name: Encrypt and Update GitHub Secret (YOUTUBE_REFRESH_TOKEN)
        run: |
          # refresh_token を暗号化
          ENCRYPTED_TOKEN=$(echo -n "${{ steps.fetch_token.outputs.refresh_token }}" | \
            openssl rsautl -encrypt -inkey <(echo "${{ env.GITHUB_KEY }}") -pubin | base64)

          # GitHub Secrets API を呼び出して更新
          curl -X PUT https://api.github.com/repos/${{ github.repository }}/actions/secrets/YOUTUBE_REFRESH_TOKEN \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"encrypted_value\":\"$ENCRYPTED_TOKEN\", \"key_id\":\"${{ env.GITHUB_KEY_ID }}\"}"

      # 4️⃣ 更新後、firebase-functions-deploy.yml をキックしてデプロイ実行
      - name: Trigger Firebase Functions Deploy Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: firebase-functions-deploy.yml
          token: ${{ secrets.GITHUB_PAT }}

